import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Contact
)
import asyncio
from datetime import datetime, timedelta

# ===== SETUP =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Initialize bot
bot = Bot(
    token="7600606099:AAFcOQo3GItSzpgehhEmb7d8xb7V_tktcuU",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# Initialize storage and dispatcher
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ===== DATABASE MOCK =====
users_db = {}
donations_db = {}
events_db = {
    datetime.now().strftime("%Y-%m-%d"): {
        "location": "–¶–ö –ú–ò–§–ò",
        "external_link": "https://example.com/external"
    },
    (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"): {
        "location": "–¶–ö –ì–æ—Ä–æ–¥—Å–∫–∞—è –±–æ–ª—å–Ω–∏—Ü–∞ ‚Ññ1",
        "external_link": "https://example.com/external2"
    },
}


# ===== STATES =====
class RegistrationStates(StatesGroup):
    PHONE = State()
    FIO = State()
    CATEGORY = State()
    GROUP = State()
    CONSENT = State()


class DonationRegistration(StatesGroup):
    CHOOSE_DATE = State()
    CONFIRM_EXTERNAL = State()


# ===== KEYBOARDS =====
def get_phone_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def get_category_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéì –°—Ç—É–¥–µ–Ω—Ç")],
            [KeyboardButton(text="üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫")],
            [KeyboardButton(text="üë• –í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")]
        ],
        resize_keyboard=True
    )


def get_consent_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω")],
            [KeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω")]
        ],
        resize_keyboard=True
    )


def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ")],
            [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
        ],
        resize_keyboard=True
    )


def get_dates_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for date in events_db:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=date, callback_data=f"date_{date}")]
        )
    return keyboard


# ===== HANDLERS =====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏ –ú–ò–§–ò.\n\n"
        "–Ø –ø–æ–º–æ–≥—É:\n"
        "- üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é\n"
        "- ‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "- ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        reply_markup=get_main_menu_keyboard()
    )


@dp.message(F.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_profile(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in users_db:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å", reply_markup=get_phone_keyboard())
        await dp.set_state(message.from_user.id, RegistrationStates.PHONE)
    else:
        user = users_db[user_id]
        donations = donations_db.get(user_id, [])

        text = (
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"–§–ò–û: {user['fio']}\n"
            f"–°—Ç–∞—Ç—É—Å: {user['category']}\n"
        )

        if user['category'] == "üéì –°—Ç—É–¥–µ–Ω—Ç":
            text += f"–ì—Ä—É–ø–ø–∞: {user.get('group', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"

        text += (
            f"\nü©∏ <b>–î–æ–Ω–∞—Ü–∏–π:</b> {len(donations)}\n"
        )

        if donations:
            last = donations[-1]
            text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è: {last['date']} ({last['location']})\n"

        text += f"üß¨ –í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú: {'‚úÖ –î–∞' if user.get('in_registry', False) else '‚ùå –ù–µ—Ç'}"
        await message.answer(text)


@dp.message(RegistrationStates.PHONE, F.contact)
async def process_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    user_id = str(message.from_user.id)

    if user_id in users_db:
        await state.clear()
        await message.answer(
            f"üîë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à –Ω–æ–º–µ—Ä: {phone}",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await state.update_data(phone=phone)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await dp.set_state(message.from_user.id, RegistrationStates.FIO)


@dp.message(RegistrationStates.FIO)
async def process_fio(message: Message, state: FSMContext):
    fio = message.text.strip()

    if len(fio.split()) != 3 or not all(word.isalpha() for word in fio.split()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ")
        return

    fio = " ".join(word.capitalize() for word in fio.split())
    await state.update_data(fio=fio)
    await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_keyboard())
    await dp.set_state(message.from_user.id, RegistrationStates.CATEGORY)


@dp.message(RegistrationStates.CATEGORY)
async def process_category(message: Message, state: FSMContext):
    if message.text not in ["üéì –°—Ç—É–¥–µ–Ω—Ç", "üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫", "üë• –í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return

    await state.update_data(category=message.text)

    if message.text == "üéì –°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("üéì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:", reply_markup=types.ReplyKeyboardRemove())
        await dp.set_state(message.from_user.id, RegistrationStates.GROUP)
    else:
        await message.answer(
            "üìÑ <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n\n"
            "1. –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö\n"
            "2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
            reply_markup=get_consent_keyboard()
        )
        await dp.set_state(message.from_user.id, RegistrationStates.CONSENT)


@dp.message(RegistrationStates.GROUP)
async def process_group(message: Message, state: FSMContext):
    group = message.text.strip()
    await state.update_data(group=group)
    await message.answer(
        "üìÑ <b>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "1. –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö\n"
        "2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
        reply_markup=get_consent_keyboard()
    )
    await dp.set_state(message.from_user.id, RegistrationStates.CONSENT)


@dp.message(RegistrationStates.CONSENT)
async def process_consent(message: Message, state: FSMContext):
    if message.text != "‚úÖ –î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω":
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    data = await state.get_data()
    user_id = str(message.from_user.id)

    users_db[user_id] = {
        "phone": data["phone"],
        "fio": data["fio"],
        "category": data["category"],
        "group": data.get("group", ""),
        "in_registry": False,
        "consent_given": True,
        "reg_date": datetime.now().strftime("%Y-%m-%d")
    }

    await state.clear()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu_keyboard())


# ===== MAIN =====
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())